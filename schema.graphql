type Domain @entity {
  id: ID!
  name: String
  labelHash: String
  label: String
  parent: Domain
  subdomains: [Domain!]! @derivedFrom(field: "parent")
  owner: Account
  minter: Account
  lockedBy: Account
  isLocked: Boolean!
  metadata: String
  royaltyAmount: BigInt!
  creationTimestamp: BigInt
  events: [DomainEvent!]! @derivedFrom(field: "domain")
  nonce: BigInt!
}

interface DomainEvent {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
}

type DomainTransferred implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
}

type Account @entity {
  id: ID!
  ownedDomains: [Domain!]! @derivedFrom(field: "owner")
  mintedDomains: [Domain!]! @derivedFrom(field: "minter")
}

type DomainMetadataChanged implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  metadataUri: String!
}

type DomainMetadataLocked implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  isLocked: Boolean!
}

type DomainRoyaltyChanged implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  royaltyAmount: BigInt!
}

type DomainRequest @entity {
  id: ID!
  parent: Domain
  offeredAmount: BigInt
  requestUri: String
  label: String
  domain: String
  requestor: Account
  nonce: BigInt
  approved: Boolean
  fulfilled: Boolean
  timestamp: BigInt
}
