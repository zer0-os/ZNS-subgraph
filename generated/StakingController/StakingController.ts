// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Bid extends ethereum.Event {
  get params(): Bid__Params {
    return new Bid__Params(this);
  }
}

export class Bid__Params {
  _event: Bid;

  constructor(event: Bid) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get controller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get parentId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }

  get createData(): BidCreateDataStruct {
    return this._event.parameters[4].value.toTuple() as BidCreateDataStruct;
  }

  get proposal(): string {
    return this._event.parameters[5].value.toString();
  }

  get amt(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class BidCreateDataStruct extends ethereum.Tuple {
  get controllerData(): Bytes {
    return this[0].toBytes();
  }

  get lockableProperties(): string {
    return this[1].toString();
  }
}

export class BidAccepted extends ethereum.Event {
  get params(): BidAccepted__Params {
    return new BidAccepted__Params(this);
  }
}

export class BidAccepted__Params {
  _event: BidAccepted;

  constructor(event: BidAccepted) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BidClaimed extends ethereum.Event {
  get params(): BidClaimed__Params {
    return new BidClaimed__Params(this);
  }
}

export class BidClaimed__Params {
  _event: BidClaimed;

  constructor(event: BidClaimed) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get controller(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class MinBidSet extends ethereum.Event {
  get params(): MinBidSet__Params {
    return new MinBidSet__Params(this);
  }
}

export class MinBidSet__Params {
  _event: MinBidSet;

  constructor(event: MinBidSet) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get minBid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeTokenSet extends ethereum.Event {
  get params(): StakeTokenSet__Params {
    return new StakeTokenSet__Params(this);
  }
}

export class StakeTokenSet__Params {
  _event: StakeTokenSet;

  constructor(event: StakeTokenSet) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stakeToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Unbid extends ethereum.Event {
  get params(): Unbid__Params {
    return new Unbid__Params(this);
  }
}

export class Unbid__Params {
  _event: Unbid;

  constructor(event: Unbid) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get parentId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakingController__configOfResultValue0Struct extends ethereum.Tuple {
  get stakeToken(): Address {
    return this[0].toAddress();
  }

  get minBid(): BigInt {
    return this[1].toBigInt();
  }
}

export class StakingController__domainConfigsResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class StakingController__stakeByHashResultValue0Struct extends ethereum.Tuple {
  get status(): i32 {
    return this[0].toI32();
  }

  get parentId(): BigInt {
    return this[1].toBigInt();
  }

  get stakeToken(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get createHash(): Bytes {
    return this[4].toBytes();
  }
}

export class StakingController__stakeOfResultValue0Struct extends ethereum.Tuple {
  get status(): i32 {
    return this[0].toI32();
  }

  get parentId(): BigInt {
    return this[1].toBigInt();
  }

  get stakeToken(): Address {
    return this[2].toAddress();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get createHash(): Bytes {
    return this[4].toBytes();
  }
}

export class StakingController extends ethereum.SmartContract {
  static bind(address: Address): StakingController {
    return new StakingController("StakingController", address);
  }

  bancorNetwork(): Address {
    let result = super.call("bancorNetwork", "bancorNetwork():(address)", []);

    return result[0].toAddress();
  }

  try_bancorNetwork(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bancorNetwork",
      "bancorNetwork():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  configOf(id: BigInt): StakingController__configOfResultValue0Struct {
    let result = super.call(
      "configOf",
      "configOf(uint256):((address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toTuple() as StakingController__configOfResultValue0Struct;
  }

  try_configOf(
    id: BigInt
  ): ethereum.CallResult<StakingController__configOfResultValue0Struct> {
    let result = super.tryCall(
      "configOf",
      "configOf(uint256):((address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as StakingController__configOfResultValue0Struct
    );
  }

  domainConfigs(param0: BigInt): StakingController__domainConfigsResult {
    let result = super.call(
      "domainConfigs",
      "domainConfigs(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new StakingController__domainConfigsResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_domainConfigs(
    param0: BigInt
  ): ethereum.CallResult<StakingController__domainConfigsResult> {
    let result = super.tryCall(
      "domainConfigs",
      "domainConfigs(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakingController__domainConfigsResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  onSetZnsController(
    sender: Address,
    oldController: Address,
    id: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onSetZnsController",
      "onSetZnsController(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(oldController),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onSetZnsController(
    sender: Address,
    oldController: Address,
    id: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onSetZnsController",
      "onSetZnsController(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(oldController),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  stakeByHash(
    stakeHash: Bytes
  ): StakingController__stakeByHashResultValue0Struct {
    let result = super.call(
      "stakeByHash",
      "stakeByHash(bytes32):((uint8,uint256,address,uint256,bytes32))",
      [ethereum.Value.fromFixedBytes(stakeHash)]
    );

    return result[0].toTuple() as StakingController__stakeByHashResultValue0Struct;
  }

  try_stakeByHash(
    stakeHash: Bytes
  ): ethereum.CallResult<StakingController__stakeByHashResultValue0Struct> {
    let result = super.tryCall(
      "stakeByHash",
      "stakeByHash(bytes32):((uint8,uint256,address,uint256,bytes32))",
      [ethereum.Value.fromFixedBytes(stakeHash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as StakingController__stakeByHashResultValue0Struct
    );
  }

  stakeOf(
    staker: Address,
    id: BigInt
  ): StakingController__stakeOfResultValue0Struct {
    let result = super.call(
      "stakeOf",
      "stakeOf(address,uint256):((uint8,uint256,address,uint256,bytes32))",
      [
        ethereum.Value.fromAddress(staker),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toTuple() as StakingController__stakeOfResultValue0Struct;
  }

  try_stakeOf(
    staker: Address,
    id: BigInt
  ): ethereum.CallResult<StakingController__stakeOfResultValue0Struct> {
    let result = super.tryCall(
      "stakeOf",
      "stakeOf(address,uint256):((uint8,uint256,address,uint256,bytes32))",
      [
        ethereum.Value.fromAddress(staker),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as StakingController__stakeOfResultValue0Struct
    );
  }
}

export class AcceptBidCall extends ethereum.Call {
  get inputs(): AcceptBidCall__Inputs {
    return new AcceptBidCall__Inputs(this);
  }

  get outputs(): AcceptBidCall__Outputs {
    return new AcceptBidCall__Outputs(this);
  }
}

export class AcceptBidCall__Inputs {
  _call: AcceptBidCall;

  constructor(call: AcceptBidCall) {
    this._call = call;
  }

  get staker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get parentId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AcceptBidCall__Outputs {
  _call: AcceptBidCall;

  constructor(call: AcceptBidCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get parentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get controller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get createData(): BidCallCreateDataStruct {
    return this._call.inputValues[3].value.toTuple() as BidCallCreateDataStruct;
  }

  get proposal(): string {
    return this._call.inputValues[4].value.toString();
  }

  get amt(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class BidCallCreateDataStruct extends ethereum.Tuple {
  get controllerData(): Bytes {
    return this[0].toBytes();
  }

  get lockableProperties(): string {
    return this[1].toString();
  }
}

export class BidByPathCall extends ethereum.Call {
  get inputs(): BidByPathCall__Inputs {
    return new BidByPathCall__Inputs(this);
  }

  get outputs(): BidByPathCall__Outputs {
    return new BidByPathCall__Outputs(this);
  }
}

export class BidByPathCall__Inputs {
  _call: BidByPathCall;

  constructor(call: BidByPathCall) {
    this._call = call;
  }

  get parentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get controller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get createData(): BidByPathCallCreateDataStruct {
    return this._call.inputValues[3].value.toTuple() as BidByPathCallCreateDataStruct;
  }

  get proposal(): string {
    return this._call.inputValues[4].value.toString();
  }

  get swapData(): BidByPathCallSwapDataStruct {
    return this._call.inputValues[5].value.toTuple() as BidByPathCallSwapDataStruct;
  }
}

export class BidByPathCall__Outputs {
  _call: BidByPathCall;

  constructor(call: BidByPathCall) {
    this._call = call;
  }
}

export class BidByPathCallCreateDataStruct extends ethereum.Tuple {
  get controllerData(): Bytes {
    return this[0].toBytes();
  }

  get lockableProperties(): string {
    return this[1].toString();
  }
}

export class BidByPathCallSwapDataStruct extends ethereum.Tuple {
  get path(): Array<Address> {
    return this[0].toAddressArray();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get minOut(): BigInt {
    return this[2].toBigInt();
  }
}

export class BidForCall extends ethereum.Call {
  get inputs(): BidForCall__Inputs {
    return new BidForCall__Inputs(this);
  }

  get outputs(): BidForCall__Outputs {
    return new BidForCall__Outputs(this);
  }
}

export class BidForCall__Inputs {
  _call: BidForCall;

  constructor(call: BidForCall) {
    this._call = call;
  }

  get parentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get controller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get createData(): BidForCallCreateDataStruct {
    return this._call.inputValues[3].value.toTuple() as BidForCallCreateDataStruct;
  }

  get proposal(): string {
    return this._call.inputValues[4].value.toString();
  }

  get amt(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get staker(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class BidForCall__Outputs {
  _call: BidForCall;

  constructor(call: BidForCall) {
    this._call = call;
  }
}

export class BidForCallCreateDataStruct extends ethereum.Tuple {
  get controllerData(): Bytes {
    return this[0].toBytes();
  }

  get lockableProperties(): string {
    return this[1].toString();
  }
}

export class BidForByPathCall extends ethereum.Call {
  get inputs(): BidForByPathCall__Inputs {
    return new BidForByPathCall__Inputs(this);
  }

  get outputs(): BidForByPathCall__Outputs {
    return new BidForByPathCall__Outputs(this);
  }
}

export class BidForByPathCall__Inputs {
  _call: BidForByPathCall;

  constructor(call: BidForByPathCall) {
    this._call = call;
  }

  get parentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get controller(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get createData(): BidForByPathCallCreateDataStruct {
    return this._call.inputValues[3].value.toTuple() as BidForByPathCallCreateDataStruct;
  }

  get proposal(): string {
    return this._call.inputValues[4].value.toString();
  }

  get swapData(): BidForByPathCallSwapDataStruct {
    return this._call.inputValues[5].value.toTuple() as BidForByPathCallSwapDataStruct;
  }

  get staker(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class BidForByPathCall__Outputs {
  _call: BidForByPathCall;

  constructor(call: BidForByPathCall) {
    this._call = call;
  }
}

export class BidForByPathCallCreateDataStruct extends ethereum.Tuple {
  get controllerData(): Bytes {
    return this[0].toBytes();
  }

  get lockableProperties(): string {
    return this[1].toString();
  }
}

export class BidForByPathCallSwapDataStruct extends ethereum.Tuple {
  get path(): Array<Address> {
    return this[0].toAddressArray();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get minOut(): BigInt {
    return this[2].toBigInt();
  }
}

export class ClaimBidCall extends ethereum.Call {
  get inputs(): ClaimBidCall__Inputs {
    return new ClaimBidCall__Inputs(this);
  }

  get outputs(): ClaimBidCall__Outputs {
    return new ClaimBidCall__Outputs(this);
  }
}

export class ClaimBidCall__Inputs {
  _call: ClaimBidCall;

  constructor(call: ClaimBidCall) {
    this._call = call;
  }

  get parentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get controller(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get lockableProperties(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class ClaimBidCall__Outputs {
  _call: ClaimBidCall;

  constructor(call: ClaimBidCall) {
    this._call = call;
  }
}

export class ConfigureDomainCall extends ethereum.Call {
  get inputs(): ConfigureDomainCall__Inputs {
    return new ConfigureDomainCall__Inputs(this);
  }

  get outputs(): ConfigureDomainCall__Outputs {
    return new ConfigureDomainCall__Outputs(this);
  }
}

export class ConfigureDomainCall__Inputs {
  _call: ConfigureDomainCall;

  constructor(call: ConfigureDomainCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get stakeToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get minBid(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConfigureDomainCall__Outputs {
  _call: ConfigureDomainCall;

  constructor(call: ConfigureDomainCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bancor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnSetZnsControllerCall extends ethereum.Call {
  get inputs(): OnSetZnsControllerCall__Inputs {
    return new OnSetZnsControllerCall__Inputs(this);
  }

  get outputs(): OnSetZnsControllerCall__Outputs {
    return new OnSetZnsControllerCall__Outputs(this);
  }
}

export class OnSetZnsControllerCall__Inputs {
  _call: OnSetZnsControllerCall;

  constructor(call: OnSetZnsControllerCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oldController(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnSetZnsControllerCall__Outputs {
  _call: OnSetZnsControllerCall;

  constructor(call: OnSetZnsControllerCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SafeClaimBidCall extends ethereum.Call {
  get inputs(): SafeClaimBidCall__Inputs {
    return new SafeClaimBidCall__Inputs(this);
  }

  get outputs(): SafeClaimBidCall__Outputs {
    return new SafeClaimBidCall__Outputs(this);
  }
}

export class SafeClaimBidCall__Inputs {
  _call: SafeClaimBidCall;

  constructor(call: SafeClaimBidCall) {
    this._call = call;
  }

  get parentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get controller(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get controllerData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get lockableProperties(): string {
    return this._call.inputValues[5].value.toString();
  }

  get transferData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class SafeClaimBidCall__Outputs {
  _call: SafeClaimBidCall;

  constructor(call: SafeClaimBidCall) {
    this._call = call;
  }
}

export class SetMinBidCall extends ethereum.Call {
  get inputs(): SetMinBidCall__Inputs {
    return new SetMinBidCall__Inputs(this);
  }

  get outputs(): SetMinBidCall__Outputs {
    return new SetMinBidCall__Outputs(this);
  }
}

export class SetMinBidCall__Inputs {
  _call: SetMinBidCall;

  constructor(call: SetMinBidCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minBid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMinBidCall__Outputs {
  _call: SetMinBidCall;

  constructor(call: SetMinBidCall) {
    this._call = call;
  }
}

export class UnbidCall extends ethereum.Call {
  get inputs(): UnbidCall__Inputs {
    return new UnbidCall__Inputs(this);
  }

  get outputs(): UnbidCall__Outputs {
    return new UnbidCall__Outputs(this);
  }
}

export class UnbidCall__Inputs {
  _call: UnbidCall;

  constructor(call: UnbidCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get parentId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnbidCall__Outputs {
  _call: UnbidCall;

  constructor(call: UnbidCall) {
    this._call = call;
  }
}
