// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BaseURISet extends ethereum.Event {
  get params(): BaseURISet__Params {
    return new BaseURISet__Params(this);
  }
}

export class BaseURISet__Params {
  _event: BaseURISet;

  constructor(event: BaseURISet) {
    this._event = event;
  }

  get baseURI(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class ChildCreateLimitSet extends ethereum.Event {
  get params(): ChildCreateLimitSet__Params {
    return new ChildCreateLimitSet__Params(this);
  }
}

export class ChildCreateLimitSet__Params {
  _event: ChildCreateLimitSet;

  constructor(event: ChildCreateLimitSet) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get childCreateLimit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ChildLockablePropertiesRuleSet extends ethereum.Event {
  get params(): ChildLockablePropertiesRuleSet__Params {
    return new ChildLockablePropertiesRuleSet__Params(this);
  }
}

export class ChildLockablePropertiesRuleSet__Params {
  _event: ChildLockablePropertiesRuleSet;

  constructor(event: ChildLockablePropertiesRuleSet) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rule(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class ControllerSet extends ethereum.Event {
  get params(): ControllerSet__Params {
    return new ControllerSet__Params(this);
  }
}

export class ControllerSet__Params {
  _event: ControllerSet;

  constructor(event: ControllerSet) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldController(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newController(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class DomainCreated extends ethereum.Event {
  get params(): DomainCreated__Params {
    return new DomainCreated__Params(this);
  }
}

export class DomainCreated__Params {
  _event: DomainCreated;

  constructor(event: DomainCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get parentId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class LockablePropertiesSet extends ethereum.Event {
  get params(): LockablePropertiesSet__Params {
    return new LockablePropertiesSet__Params(this);
  }
}

export class LockablePropertiesSet__Params {
  _event: LockablePropertiesSet;

  constructor(event: LockablePropertiesSet) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lockableProperties(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class PropertiesSet extends ethereum.Event {
  get params(): PropertiesSet__Params {
    return new PropertiesSet__Params(this);
  }
}

export class PropertiesSet__Params {
  _event: PropertiesSet;

  constructor(event: PropertiesSet) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get properties(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ZNSRegistry__entryOfResultOutStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get parent(): BigInt {
    return this[1].toBigInt();
  }

  get depth(): BigInt {
    return this[2].toBigInt();
  }

  get controller(): Address {
    return this[3].toAddress();
  }

  get creator(): Address {
    return this[4].toAddress();
  }

  get name(): string {
    return this[5].toString();
  }

  get domain(): string {
    return this[6].toString();
  }

  get properties(): string {
    return this[7].toString();
  }

  get lockableProperties(): string {
    return this[8].toString();
  }

  get createLimit(): BigInt {
    return this[9].toBigInt();
  }

  get childCreateLimit(): BigInt {
    return this[10].toBigInt();
  }

  get childCount(): BigInt {
    return this[11].toBigInt();
  }

  get lockablePropertiesRule(): i32 {
    return this[12].toI32();
  }

  get childLockablePropertiesRule(): i32 {
    return this[13].toI32();
  }
}

export class ZNSRegistry extends ethereum.SmartContract {
  static bind(address: Address): ZNSRegistry {
    return new ZNSRegistry("ZNSRegistry", address);
  }

  ROOT_ID(): BigInt {
    let result = super.call("ROOT_ID", "ROOT_ID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ROOT_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ROOT_ID", "ROOT_ID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  calcId(parentId: BigInt, name: string): BigInt {
    let result = super.call("calcId", "calcId(uint256,string):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(parentId),
      ethereum.Value.fromString(name)
    ]);

    return result[0].toBigInt();
  }

  try_calcId(parentId: BigInt, name: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("calcId", "calcId(uint256,string):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(parentId),
      ethereum.Value.fromString(name)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  childCountOf(id: BigInt): BigInt {
    let result = super.call("childCountOf", "childCountOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_childCountOf(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "childCountOf",
      "childCountOf(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  childCreateLimitOf(id: BigInt): BigInt {
    let result = super.call(
      "childCreateLimitOf",
      "childCreateLimitOf(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_childCreateLimitOf(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "childCreateLimitOf",
      "childCreateLimitOf(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  childLockablePropertiesRuleOf(id: BigInt): i32 {
    let result = super.call(
      "childLockablePropertiesRuleOf",
      "childLockablePropertiesRuleOf(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toI32();
  }

  try_childLockablePropertiesRuleOf(id: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "childLockablePropertiesRuleOf",
      "childLockablePropertiesRuleOf(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  controllerLikeOf(creator: Address, id: BigInt): boolean {
    let result = super.call(
      "controllerLikeOf",
      "controllerLikeOf(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(creator),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBoolean();
  }

  try_controllerLikeOf(
    creator: Address,
    id: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "controllerLikeOf",
      "controllerLikeOf(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(creator),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  controllerOf(id: BigInt): Address {
    let result = super.call("controllerOf", "controllerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toAddress();
  }

  try_controllerOf(id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "controllerOf",
      "controllerOf(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createDomain(
    parentId: BigInt,
    name: string,
    _owner: Address,
    _controller: Address
  ): BigInt {
    let result = super.call(
      "createDomain",
      "createDomain(uint256,string,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(parentId),
        ethereum.Value.fromString(name),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_controller)
      ]
    );

    return result[0].toBigInt();
  }

  try_createDomain(
    parentId: BigInt,
    name: string,
    _owner: Address,
    _controller: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createDomain",
      "createDomain(uint256,string,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(parentId),
        ethereum.Value.fromString(name),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_controller)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createDomainSafeController(
    parentId: BigInt,
    name: string,
    _owner: Address,
    _controller: Address,
    controllerData: Bytes
  ): BigInt {
    let result = super.call(
      "createDomainSafeController",
      "createDomainSafeController(uint256,string,address,address,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(parentId),
        ethereum.Value.fromString(name),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_controller),
        ethereum.Value.fromBytes(controllerData)
      ]
    );

    return result[0].toBigInt();
  }

  try_createDomainSafeController(
    parentId: BigInt,
    name: string,
    _owner: Address,
    _controller: Address,
    controllerData: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createDomainSafeController",
      "createDomainSafeController(uint256,string,address,address,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(parentId),
        ethereum.Value.fromString(name),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_controller),
        ethereum.Value.fromBytes(controllerData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createDomainSafeMint(
    parentId: BigInt,
    name: string,
    _owner: Address,
    _controller: Address,
    mintData: Bytes
  ): BigInt {
    let result = super.call(
      "createDomainSafeMint",
      "createDomainSafeMint(uint256,string,address,address,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(parentId),
        ethereum.Value.fromString(name),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_controller),
        ethereum.Value.fromBytes(mintData)
      ]
    );

    return result[0].toBigInt();
  }

  try_createDomainSafeMint(
    parentId: BigInt,
    name: string,
    _owner: Address,
    _controller: Address,
    mintData: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createDomainSafeMint",
      "createDomainSafeMint(uint256,string,address,address,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(parentId),
        ethereum.Value.fromString(name),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_controller),
        ethereum.Value.fromBytes(mintData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createLimitOf(id: BigInt): BigInt {
    let result = super.call(
      "createLimitOf",
      "createLimitOf(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_createLimitOf(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createLimitOf",
      "createLimitOf(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  creatorOf(id: BigInt): Address {
    let result = super.call("creatorOf", "creatorOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toAddress();
  }

  try_creatorOf(id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("creatorOf", "creatorOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depthOf(id: BigInt): BigInt {
    let result = super.call("depthOf", "depthOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_depthOf(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("depthOf", "depthOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  entryOf(id: BigInt): ZNSRegistry__entryOfResultOutStruct {
    let result = super.call(
      "entryOf",
      "entryOf(uint256):((address,uint256,uint256,address,address,string,string,string,string,uint256,uint256,uint256,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toTuple() as ZNSRegistry__entryOfResultOutStruct;
  }

  try_entryOf(
    id: BigInt
  ): ethereum.CallResult<ZNSRegistry__entryOfResultOutStruct> {
    let result = super.tryCall(
      "entryOf",
      "entryOf(uint256):((address,uint256,uint256,address,address,string,string,string,string,uint256,uint256,uint256,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as ZNSRegistry__entryOfResultOutStruct
    );
  }

  exists(id: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_exists(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getId(path: Array<string>): BigInt {
    let result = super.call("getId", "getId(string[]):(uint256)", [
      ethereum.Value.fromStringArray(path)
    ]);

    return result[0].toBigInt();
  }

  try_getId(path: Array<string>): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getId", "getId(string[]):(uint256)", [
      ethereum.Value.fromStringArray(path)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockablePropertiesOf(id: BigInt): string {
    let result = super.call(
      "lockablePropertiesOf",
      "lockablePropertiesOf(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toString();
  }

  try_lockablePropertiesOf(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "lockablePropertiesOf",
      "lockablePropertiesOf(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  lockablePropertiesRuleOf(id: BigInt): i32 {
    let result = super.call(
      "lockablePropertiesRuleOf",
      "lockablePropertiesRuleOf(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toI32();
  }

  try_lockablePropertiesRuleOf(id: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "lockablePropertiesRuleOf",
      "lockablePropertiesRuleOf(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nameOf(id: BigInt): string {
    let result = super.call("nameOf", "nameOf(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toString();
  }

  try_nameOf(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("nameOf", "nameOf(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  parentOf(id: BigInt): BigInt {
    let result = super.call("parentOf", "parentOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_parentOf(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("parentOf", "parentOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  propertiesOf(id: BigInt): string {
    let result = super.call("propertiesOf", "propertiesOf(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toString();
  }

  try_propertiesOf(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "propertiesOf",
      "propertiesOf(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  safeCreateDomain(
    parentId: BigInt,
    name: string,
    _owner: Address,
    _controller: Address,
    mintData: Bytes,
    controllerData: Bytes
  ): BigInt {
    let result = super.call(
      "safeCreateDomain",
      "safeCreateDomain(uint256,string,address,address,bytes,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(parentId),
        ethereum.Value.fromString(name),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_controller),
        ethereum.Value.fromBytes(mintData),
        ethereum.Value.fromBytes(controllerData)
      ]
    );

    return result[0].toBigInt();
  }

  try_safeCreateDomain(
    parentId: BigInt,
    name: string,
    _owner: Address,
    _controller: Address,
    mintData: Bytes,
    controllerData: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "safeCreateDomain",
      "safeCreateDomain(uint256,string,address,address,bytes,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(parentId),
        ethereum.Value.fromString(name),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_controller),
        ethereum.Value.fromBytes(mintData),
        ethereum.Value.fromBytes(controllerData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validateName(name: string): boolean {
    let result = super.call("validateName", "validateName(string):(bool)", [
      ethereum.Value.fromString(name)
    ]);

    return result[0].toBoolean();
  }

  try_validateName(name: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("validateName", "validateName(string):(bool)", [
      ethereum.Value.fromString(name)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CreateDomainCall extends ethereum.Call {
  get inputs(): CreateDomainCall__Inputs {
    return new CreateDomainCall__Inputs(this);
  }

  get outputs(): CreateDomainCall__Outputs {
    return new CreateDomainCall__Outputs(this);
  }
}

export class CreateDomainCall__Inputs {
  _call: CreateDomainCall;

  constructor(call: CreateDomainCall) {
    this._call = call;
  }

  get parentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _controller(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreateDomainCall__Outputs {
  _call: CreateDomainCall;

  constructor(call: CreateDomainCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateDomainSafeControllerCall extends ethereum.Call {
  get inputs(): CreateDomainSafeControllerCall__Inputs {
    return new CreateDomainSafeControllerCall__Inputs(this);
  }

  get outputs(): CreateDomainSafeControllerCall__Outputs {
    return new CreateDomainSafeControllerCall__Outputs(this);
  }
}

export class CreateDomainSafeControllerCall__Inputs {
  _call: CreateDomainSafeControllerCall;

  constructor(call: CreateDomainSafeControllerCall) {
    this._call = call;
  }

  get parentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _controller(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get controllerData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class CreateDomainSafeControllerCall__Outputs {
  _call: CreateDomainSafeControllerCall;

  constructor(call: CreateDomainSafeControllerCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateDomainSafeMintCall extends ethereum.Call {
  get inputs(): CreateDomainSafeMintCall__Inputs {
    return new CreateDomainSafeMintCall__Inputs(this);
  }

  get outputs(): CreateDomainSafeMintCall__Outputs {
    return new CreateDomainSafeMintCall__Outputs(this);
  }
}

export class CreateDomainSafeMintCall__Inputs {
  _call: CreateDomainSafeMintCall;

  constructor(call: CreateDomainSafeMintCall) {
    this._call = call;
  }

  get parentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _controller(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get mintData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class CreateDomainSafeMintCall__Outputs {
  _call: CreateDomainSafeMintCall;

  constructor(call: CreateDomainSafeMintCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _controller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SafeCreateDomainCall extends ethereum.Call {
  get inputs(): SafeCreateDomainCall__Inputs {
    return new SafeCreateDomainCall__Inputs(this);
  }

  get outputs(): SafeCreateDomainCall__Outputs {
    return new SafeCreateDomainCall__Outputs(this);
  }
}

export class SafeCreateDomainCall__Inputs {
  _call: SafeCreateDomainCall;

  constructor(call: SafeCreateDomainCall) {
    this._call = call;
  }

  get parentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _controller(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get mintData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get controllerData(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SafeCreateDomainCall__Outputs {
  _call: SafeCreateDomainCall;

  constructor(call: SafeCreateDomainCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SafeSetControllerCall extends ethereum.Call {
  get inputs(): SafeSetControllerCall__Inputs {
    return new SafeSetControllerCall__Inputs(this);
  }

  get outputs(): SafeSetControllerCall__Outputs {
    return new SafeSetControllerCall__Outputs(this);
  }
}

export class SafeSetControllerCall__Inputs {
  _call: SafeSetControllerCall;

  constructor(call: SafeSetControllerCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get controller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SafeSetControllerCall__Outputs {
  _call: SafeSetControllerCall;

  constructor(call: SafeSetControllerCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetChildCreateLimitCall extends ethereum.Call {
  get inputs(): SetChildCreateLimitCall__Inputs {
    return new SetChildCreateLimitCall__Inputs(this);
  }

  get outputs(): SetChildCreateLimitCall__Outputs {
    return new SetChildCreateLimitCall__Outputs(this);
  }
}

export class SetChildCreateLimitCall__Inputs {
  _call: SetChildCreateLimitCall;

  constructor(call: SetChildCreateLimitCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get childCreateLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetChildCreateLimitCall__Outputs {
  _call: SetChildCreateLimitCall;

  constructor(call: SetChildCreateLimitCall) {
    this._call = call;
  }
}

export class SetChildLockablePropertiesRuleCall extends ethereum.Call {
  get inputs(): SetChildLockablePropertiesRuleCall__Inputs {
    return new SetChildLockablePropertiesRuleCall__Inputs(this);
  }

  get outputs(): SetChildLockablePropertiesRuleCall__Outputs {
    return new SetChildLockablePropertiesRuleCall__Outputs(this);
  }
}

export class SetChildLockablePropertiesRuleCall__Inputs {
  _call: SetChildLockablePropertiesRuleCall;

  constructor(call: SetChildLockablePropertiesRuleCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rule(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetChildLockablePropertiesRuleCall__Outputs {
  _call: SetChildLockablePropertiesRuleCall;

  constructor(call: SetChildLockablePropertiesRuleCall) {
    this._call = call;
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get controller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class SetLockablePropertiesCall extends ethereum.Call {
  get inputs(): SetLockablePropertiesCall__Inputs {
    return new SetLockablePropertiesCall__Inputs(this);
  }

  get outputs(): SetLockablePropertiesCall__Outputs {
    return new SetLockablePropertiesCall__Outputs(this);
  }
}

export class SetLockablePropertiesCall__Inputs {
  _call: SetLockablePropertiesCall;

  constructor(call: SetLockablePropertiesCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lockableProperties(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetLockablePropertiesCall__Outputs {
  _call: SetLockablePropertiesCall;

  constructor(call: SetLockablePropertiesCall) {
    this._call = call;
  }
}

export class SetPropertiesCall extends ethereum.Call {
  get inputs(): SetPropertiesCall__Inputs {
    return new SetPropertiesCall__Inputs(this);
  }

  get outputs(): SetPropertiesCall__Outputs {
    return new SetPropertiesCall__Outputs(this);
  }
}

export class SetPropertiesCall__Inputs {
  _call: SetPropertiesCall;

  constructor(call: SetPropertiesCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get properties(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetPropertiesCall__Outputs {
  _call: SetPropertiesCall;

  constructor(call: SetPropertiesCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
