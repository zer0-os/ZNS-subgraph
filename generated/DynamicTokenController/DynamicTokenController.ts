// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DynamicConverterUpgraded extends ethereum.Event {
  get params(): DynamicConverterUpgraded__Params {
    return new DynamicConverterUpgraded__Params(this);
  }
}

export class DynamicConverterUpgraded__Params {
  _event: DynamicConverterUpgraded;

  constructor(event: DynamicConverterUpgraded) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reserve(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dsToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get oldConverter(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get newConverter(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class DynamicTokenCreated extends ethereum.Event {
  get params(): DynamicTokenCreated__Params {
    return new DynamicTokenCreated__Params(this);
  }
}

export class DynamicTokenCreated__Params {
  _event: DynamicTokenCreated;

  constructor(event: DynamicTokenCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reserve(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dsToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get converter(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class DynamicTokenController extends ethereum.SmartContract {
  static bind(address: Address): DynamicTokenController {
    return new DynamicTokenController("DynamicTokenController", address);
  }

  bancorRegistry(): Address {
    let result = super.call("bancorRegistry", "bancorRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_bancorRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bancorRegistry",
      "bancorRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  converters(param0: BigInt): Address {
    let result = super.call("converters", "converters(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_converters(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("converters", "converters(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dsTokenImplementation(): Address {
    let result = super.call(
      "dsTokenImplementation",
      "dsTokenImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_dsTokenImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dsTokenImplementation",
      "dsTokenImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dynamicConverterImplementation(): Address {
    let result = super.call(
      "dynamicConverterImplementation",
      "dynamicConverterImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_dynamicConverterImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dynamicConverterImplementation",
      "dynamicConverterImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onSetZnsController(
    sender: Address,
    oldController: Address,
    id: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onSetZnsController",
      "onSetZnsController(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(oldController),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onSetZnsController(
    sender: Address,
    oldController: Address,
    id: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onSetZnsController",
      "onSetZnsController(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(oldController),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingController(): Address {
    let result = super.call(
      "stakingController",
      "stakingController():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stakingController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakingController",
      "stakingController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokens(param0: BigInt): Address {
    let result = super.call("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateDynamicTokenAndConfigureStakeCall extends ethereum.Call {
  get inputs(): CreateDynamicTokenAndConfigureStakeCall__Inputs {
    return new CreateDynamicTokenAndConfigureStakeCall__Inputs(this);
  }

  get outputs(): CreateDynamicTokenAndConfigureStakeCall__Outputs {
    return new CreateDynamicTokenAndConfigureStakeCall__Outputs(this);
  }
}

export class CreateDynamicTokenAndConfigureStakeCall__Inputs {
  _call: CreateDynamicTokenAndConfigureStakeCall;

  constructor(call: CreateDynamicTokenAndConfigureStakeCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get reserve(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get initWeight(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get stepWeight(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get minWeight(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get mcapThreshold(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get minBid(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[7].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[8].value.toString();
  }
}

export class CreateDynamicTokenAndConfigureStakeCall__Outputs {
  _call: CreateDynamicTokenAndConfigureStakeCall;

  constructor(call: CreateDynamicTokenAndConfigureStakeCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _dsImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _dconvImpl(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _stakingController(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _registry(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _bancorRegistry(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnSetZnsControllerCall extends ethereum.Call {
  get inputs(): OnSetZnsControllerCall__Inputs {
    return new OnSetZnsControllerCall__Inputs(this);
  }

  get outputs(): OnSetZnsControllerCall__Outputs {
    return new OnSetZnsControllerCall__Outputs(this);
  }
}

export class OnSetZnsControllerCall__Inputs {
  _call: OnSetZnsControllerCall;

  constructor(call: OnSetZnsControllerCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oldController(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnSetZnsControllerCall__Outputs {
  _call: OnSetZnsControllerCall;

  constructor(call: OnSetZnsControllerCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ReduceWeightCall extends ethereum.Call {
  get inputs(): ReduceWeightCall__Inputs {
    return new ReduceWeightCall__Inputs(this);
  }

  get outputs(): ReduceWeightCall__Outputs {
    return new ReduceWeightCall__Outputs(this);
  }
}

export class ReduceWeightCall__Inputs {
  _call: ReduceWeightCall;

  constructor(call: ReduceWeightCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get reserveToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ReduceWeightCall__Outputs {
  _call: ReduceWeightCall;

  constructor(call: ReduceWeightCall) {
    this._call = call;
  }
}

export class ReduceWeightToCall extends ethereum.Call {
  get inputs(): ReduceWeightToCall__Inputs {
    return new ReduceWeightToCall__Inputs(this);
  }

  get outputs(): ReduceWeightToCall__Outputs {
    return new ReduceWeightToCall__Outputs(this);
  }
}

export class ReduceWeightToCall__Inputs {
  _call: ReduceWeightToCall;

  constructor(call: ReduceWeightToCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get reserveToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ReduceWeightToCall__Outputs {
  _call: ReduceWeightToCall;

  constructor(call: ReduceWeightToCall) {
    this._call = call;
  }
}

export class SetBancorRegistryCall extends ethereum.Call {
  get inputs(): SetBancorRegistryCall__Inputs {
    return new SetBancorRegistryCall__Inputs(this);
  }

  get outputs(): SetBancorRegistryCall__Outputs {
    return new SetBancorRegistryCall__Outputs(this);
  }
}

export class SetBancorRegistryCall__Inputs {
  _call: SetBancorRegistryCall;

  constructor(call: SetBancorRegistryCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBancorRegistryCall__Outputs {
  _call: SetBancorRegistryCall;

  constructor(call: SetBancorRegistryCall) {
    this._call = call;
  }
}

export class SetDSTokenImplementationCall extends ethereum.Call {
  get inputs(): SetDSTokenImplementationCall__Inputs {
    return new SetDSTokenImplementationCall__Inputs(this);
  }

  get outputs(): SetDSTokenImplementationCall__Outputs {
    return new SetDSTokenImplementationCall__Outputs(this);
  }
}

export class SetDSTokenImplementationCall__Inputs {
  _call: SetDSTokenImplementationCall;

  constructor(call: SetDSTokenImplementationCall) {
    this._call = call;
  }

  get _impl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDSTokenImplementationCall__Outputs {
  _call: SetDSTokenImplementationCall;

  constructor(call: SetDSTokenImplementationCall) {
    this._call = call;
  }
}

export class SetDynamicConverterImplemenationCall extends ethereum.Call {
  get inputs(): SetDynamicConverterImplemenationCall__Inputs {
    return new SetDynamicConverterImplemenationCall__Inputs(this);
  }

  get outputs(): SetDynamicConverterImplemenationCall__Outputs {
    return new SetDynamicConverterImplemenationCall__Outputs(this);
  }
}

export class SetDynamicConverterImplemenationCall__Inputs {
  _call: SetDynamicConverterImplemenationCall;

  constructor(call: SetDynamicConverterImplemenationCall) {
    this._call = call;
  }

  get _impl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDynamicConverterImplemenationCall__Outputs {
  _call: SetDynamicConverterImplemenationCall;

  constructor(call: SetDynamicConverterImplemenationCall) {
    this._call = call;
  }
}

export class UpgradeConverterCall extends ethereum.Call {
  get inputs(): UpgradeConverterCall__Inputs {
    return new UpgradeConverterCall__Inputs(this);
  }

  get outputs(): UpgradeConverterCall__Outputs {
    return new UpgradeConverterCall__Outputs(this);
  }
}

export class UpgradeConverterCall__Inputs {
  _call: UpgradeConverterCall;

  constructor(call: UpgradeConverterCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpgradeConverterCall__Outputs {
  _call: UpgradeConverterCall;

  constructor(call: UpgradeConverterCall) {
    this._call = call;
  }
}
